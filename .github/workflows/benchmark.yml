name: Benchmark

on: [push]

jobs:
  benchmark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y clang neovim bc curl
      - name: Install Helix
        run: |
          HELIX_VERSION="23.10"
          curl -L "https://github.com/helix-editor/helix/releases/download/${HELIX_VERSION}/helix-${HELIX_VERSION}-x86_64-linux.tar.xz" | tar -xJ
          echo "$(pwd)/helix-${HELIX_VERSION}-x86_64-linux" >> $GITHUB_PATH
      - name: Build arc
        run: make
      - name: Run tests
        run: make test

      # Create files
      - name: Create test files
        run: |
          # 10KB file with 25-char lines (approx 10.2KB)
          head -c 41000 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 25 | head -n 394 > random_10kb.txt
          # 10MB file with 25-char lines (approx 10.5MB)
          head -c 42000000 /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 25 | head -n 403298 > random_10mb.txt

      # 10KB Benchmarks
      - name: Run arc benchmark (10KB)
        run: /usr/bin/time -v ./build/arc --benchmark random_10kb.txt 2> arc_10kb_time.log
      - name: Run neovim benchmark (10KB)
        run: /usr/bin/time -v nvim --headless -c 'q!' random_10kb.txt 2> nvim_10kb_time.log
      - name: Run helix benchmark (10KB)
        run: timeout 2s /usr/bin/time -v hx random_10kb.txt 2> helix_10kb_time.log || true

      # 10MB Benchmarks
      - name: Run arc benchmark (10MB)
        run: /usr/bin/time -v ./build/arc --benchmark random_10mb.txt 2> arc_10mb_time.log
      - name: Run neovim benchmark (10MB)
        run: /usr/bin/time -v nvim --headless -c 'q!' random_10mb.txt 2> nvim_10mb_time.log
      - name: Run helix benchmark (10MB)
        run: timeout 2s /usr/bin/time -v hx random_10mb.txt 2> helix_10mb_time.log || true

      - name: Generate report
        run: |
          # Function to parse time and memory
          parse_results() {
            local log_file=$1
            if [ ! -f "$log_file" ]; then
              echo "N/A N/A"
              return
            fi
            local wall_time_str=$(grep 'Elapsed (wall clock) time' $log_file | awk '{print $NF}')
            local total_seconds
            if echo "$wall_time_str" | grep -q '.*:.*:.*'; then
              local hours=$(echo $wall_time_str | cut -d: -f1)
              local minutes=$(echo $wall_time_str | cut -d: -f2)
              local seconds=$(echo $wall_time_str | cut -d: -f3)
              total_seconds=$(echo "$hours*3600 + $minutes*60 + $seconds" | bc)
            elif echo "$wall_time_str" | grep -q '.*:.*'; then
              local minutes=$(echo $wall_time_str | cut -d: -f1)
              local seconds=$(echo $wall_time_str | cut -d: -f2)
              total_seconds=$(echo "$minutes*60 + $seconds" | bc)
            else
              total_seconds=$wall_time_str
            fi
            local ms=$(echo "$total_seconds * 1000" | bc)
            local mem_kb=$(grep 'Maximum resident set size' $log_file | awk '{print $NF}')
            local mem_mb=$(echo "scale=2; $mem_kb / 1024" | bc)
            echo "$ms $mem_mb"
          }

          ARC_10KB_RESULTS=($(parse_results arc_10kb_time.log))
          NVIM_10KB_RESULTS=($(parse_results nvim_10kb_time.log))
          HELIX_10KB_RESULTS=($(parse_results helix_10kb_time.log))
          ARC_10MB_RESULTS=($(parse_results arc_10mb_time.log))
          NVIM_10MB_RESULTS=($(parse_results nvim_10mb_time.log))
          HELIX_10MB_RESULTS=($(parse_results helix_10mb_time.log))

          # Create the markdown table and append to the job summary
          echo "### Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "| File Size | Application | Startup Time (ms) | Memory Used (MB) |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------------|-------------------|------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 10 KB     | arc         | \`${ARC_10KB_RESULTS[0]}\`          | \`${ARC_10KB_RESULTS[1]}\`     |" >> $GITHUB_STEP_SUMMARY
          echo "| 10 KB     | neovim      | \`${NVIM_10KB_RESULTS[0]}\`         | \`${NVIM_10KB_RESULTS[1]}\`    |" >> $GITHUB_STEP_SUMMARY
          echo "| 10 KB     | helix       | \`${HELIX_10KB_RESULTS[0]}\`        | \`${HELIX_10KB_RESULTS[1]}\`   |" >> $GITHUB_STEP_SUMMARY
          echo "| 10 MB     | arc         | \`${ARC_10MB_RESULTS[0]}\`          | \`${ARC_10MB_RESULTS[1]}\`     |" >> $GITHUB_STEP_SUMMARY
          echo "| 10 MB     | neovim      | \`${NVIM_10MB_RESULTS[0]}\`         | \`${NVIM_10MB_RESULTS[1]}\`    |" >> $GITHUB_STEP_SUMMARY
          echo "| 10 MB     | helix       | \`${HELIX_10MB_RESULTS[0]}\`        | \`${HELIX_10MB_RESULTS[1]}\`   |" >> $GITHUB_STEP_SUMMARY
